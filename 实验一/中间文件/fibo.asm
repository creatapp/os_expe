
a.out：     文件格式 elf64-x86-64
体系结构：i386:x86-64，标志 0x00000150：
HAS_SYMS, DYNAMIC, D_PAGED
起始地址 0x0000000000000660

Contents of section .interp:
 0238 2f6c6962 36342f6c 642d6c69 6e75782d  /lib64/ld-linux-
 0248 7838362d 36342e73 6f2e3200           x86-64.so.2.    
Contents of section .note.ABI-tag:
 0254 04000000 10000000 01000000 474e5500  ............GNU.
 0264 00000000 02000000 06000000 20000000  ............ ...
Contents of section .note.gnu.build-id:
 0274 04000000 14000000 03000000 474e5500  ............GNU.
 0284 3d29244c 2d52c422 88d08940 2d2ae7c9  =)$L-R."...@-*..
 0294 a5b48372                             ...r            
Contents of section .gnu.hash:
 0298 01000000 01000000 01000000 00000000  ................
 02a8 00000000 00000000 00000000           ............    
Contents of section .dynsym:
 02b8 00000000 00000000 00000000 00000000  ................
 02c8 00000000 00000000 58000000 20000000  ........X... ...
 02d8 00000000 00000000 00000000 00000000  ................
 02e8 1a000000 12000000 00000000 00000000  ................
 02f8 00000000 00000000 30000000 12000000  ........0.......
 0308 00000000 00000000 00000000 00000000  ................
 0318 74000000 20000000 00000000 00000000  t... ...........
 0328 00000000 00000000 83000000 20000000  ............ ...
 0338 00000000 00000000 00000000 00000000  ................
 0348 0b000000 12000000 00000000 00000000  ................
 0358 00000000 00000000 97000000 20000000  ............ ...
 0368 00000000 00000000 00000000 00000000  ................
 0378 21000000 22000000 00000000 00000000  !..."...........
 0388 00000000 00000000                    ........        
Contents of section .dynstr:
 0390 006c6962 632e736f 2e36005f 5f69736f  .libc.so.6.__iso
 03a0 6339395f 7363616e 66007072 696e7466  c99_scanf.printf
 03b0 005f5f63 78615f66 696e616c 697a6500  .__cxa_finalize.
 03c0 5f5f6c69 62635f73 74617274 5f6d6169  __libc_start_mai
 03d0 6e00474c 4942435f 322e3700 474c4942  n.GLIBC_2.7.GLIB
 03e0 435f322e 322e3500 5f49544d 5f646572  C_2.2.5._ITM_der
 03f0 65676973 74657254 4d436c6f 6e655461  egisterTMCloneTa
 0400 626c6500 5f5f676d 6f6e5f73 74617274  ble.__gmon_start
 0410 5f5f005f 4a765f52 65676973 74657243  __._Jv_RegisterC
 0420 6c617373 6573005f 49544d5f 72656769  lasses._ITM_regi
 0430 73746572 544d436c 6f6e6554 61626c65  sterTMCloneTable
 0440 00                                   .               
Contents of section .gnu.version:
 0442 00000000 02000200 00000000 03000000  ................
 0452 0200                                 ..              
Contents of section .gnu.version_r:
 0458 01000200 01000000 10000000 00000000  ................
 0468 1769690d 00000300 42000000 10000000  .ii.....B.......
 0478 751a6909 00000200 4c000000 00000000  u.i.....L.......
Contents of section .rela.dyn:
 0488 d81d2000 00000000 08000000 00000000  .. .............
 0498 60070000 00000000 e01d2000 00000000  `......... .....
 04a8 08000000 00000000 20070000 00000000  ........ .......
 04b8 48202000 00000000 08000000 00000000  H  .............
 04c8 48202000 00000000 60202000 00000000  H  .....`  .....
 04d8 08000000 00000000 f80b0000 00000000  ................
 04e8 68202000 00000000 08000000 00000000  h  .............
 04f8 fe0b0000 00000000 70202000 00000000  ........p  .....
 0508 08000000 00000000 040c0000 00000000  ................
 0518 78202000 00000000 08000000 00000000  x  .............
 0528 0a0c0000 00000000 80202000 00000000  .........  .....
 0538 08000000 00000000 100c0000 00000000  ................
 0548 d01f2000 00000000 06000000 01000000  .. .............
 0558 00000000 00000000 d81f2000 00000000  .......... .....
 0568 06000000 03000000 00000000 00000000  ................
 0578 e01f2000 00000000 06000000 04000000  .. .............
 0588 00000000 00000000 e81f2000 00000000  .......... .....
 0598 06000000 05000000 00000000 00000000  ................
 05a8 f01f2000 00000000 06000000 07000000  .. .............
 05b8 00000000 00000000 f81f2000 00000000  .......... .....
 05c8 06000000 08000000 00000000 00000000  ................
Contents of section .rela.plt:
 05d8 18202000 00000000 07000000 02000000  .  .............
 05e8 00000000 00000000 20202000 00000000  ........   .....
 05f8 07000000 06000000 00000000 00000000  ................
Contents of section .init:
 0608 4883ec08 488b05cd 19200048 85c07402  H...H.... .H..t.
 0618 ffd04883 c408c3                      ..H....         
Contents of section .plt:
 0620 ff35e219 2000ff25 e4192000 0f1f4000  .5.. ..%.. ...@.
 0630 ff25e219 20006800 000000e9 e0ffffff  .%.. .h.........
 0640 ff25da19 20006801 000000e9 d0ffffff  .%.. .h.........
Contents of section .plt.got:
 0650 ff25a219 20006690                    .%.. .f.        
Contents of section .text:
 0660 31ed4989 d15e4889 e24883e4 f050544c  1.I..^H..H...PTL
 0670 8d056a05 0000488d 0df30400 00488d3d  ..j...H......H.=
 0680 0c010000 ff154e19 2000f40f 1f440000  ......N. ....D..
 0690 488d3df1 19200048 8d05f119 20005548  H.=.. .H.... .UH
 06a0 29f84889 e54883f8 0e761548 8b051e19  ).H..H...v.H....
 06b0 20004885 c074095d ffe0660f 1f440000   .H..t.]..f..D..
 06c0 5dc30f1f 4000662e 0f1f8400 00000000  ]...@.f.........
 06d0 488d3db1 19200048 8d35aa19 20005548  H.=.. .H.5.. .UH
 06e0 29fe4889 e548c1fe 034889f0 48c1e83f  ).H..H...H..H..?
 06f0 4801c648 d1fe7418 488b05f1 18200048  H..H..t.H.... .H
 0700 85c0740c 5dffe066 0f1f8400 00000000  ..t.]..f........
 0710 5dc30f1f 4000662e 0f1f8400 00000000  ]...@.f.........
 0720 803d6119 20000075 2748833d c7182000  .=a. ..u'H.=.. .
 0730 00554889 e5740c48 8b3d0a19 2000e80d  .UH..t.H.=.. ...
 0740 ffffffe8 48ffffff 5dc60538 19200001  ....H...]..8. ..
 0750 f3c30f1f 4000662e 0f1f8400 00000000  ....@.f.........
 0760 488d3d81 16200048 833f0075 0be95eff  H.=.. .H.?.u..^.
 0770 ffff660f 1f440000 488b0569 18200048  ..f..D..H..i. .H
 0780 85c074e9 554889e5 ffd05de9 40ffffff  ..t.UH....].@...
 0790 554889e5 4881ecf0 00000048 8d357604  UH..H......H.5v.
 07a0 0000488d 3d900400 00b80000 0000e87d  ..H.=..........}
 07b0 feffffc7 45fc0000 0000488d 55f0488d  ....E.....H.U.H.
 07c0 45f44889 c6488d3d 71040000 b8000000  E.H..H.=q.......
 07d0 00e86afe ffff488d 5580b800 000000b9  ..j...H.U.......
 07e0 0c000000 4889d7f3 48ab4889 fa890248  ....H...H.H....H
 07f0 83c20488 024883c2 01488d95 10ffffff  .....H...H......
 0800 b8000000 00b90c00 00004889 d7f348ab  ..........H...H.
 0810 4889fa89 024883c2 04880248 83c2018b  H....H.....H....
 0820 45f48945 f8e98000 0000488d 55808b45  E..E......H.U..E
 0830 f84889d6 89c7e882 0000008b 45fc83c0  .H..........E...
 0840 0183f804 7f088b45 fc83c001 eb05b800  .......E........
 0850 00000089 45fc488d 9510ffff ff488d45  ....E.H......H.E
 0860 804889d6 4889c7e8 5d020000 8b45fc48  .H..H...]....E.H
 0870 98488d14 c5000000 00488d05 e0172000  .H.......H.... .
 0880 488b0402 488d9510 ffffff48 8d0db103  H...H......H....
 0890 00004889 c6488d3d ac030000 b8000000  ..H..H.=........
 08a0 00e88afd ffff8345 f8018b45 f03945f8  .......E...E.9E.
 08b0 0f8e74ff ffffb800 000000c9 c3554889  ..t..........UH.
 08c0 e54881ec 88000000 89bd0cff ffff4889  .H............H.
 08d0 b500ffff ffc745fc 00000000 eb178b45  ......E........E
 08e0 fc4863d0 488b8500 ffffff48 01d0c600  .Hc.H......H....
 08f0 008345fc 01837dfc 647ee348 8d5580b8  ..E...}.d~.H.U..
 0900 00000000 b90c0000 004889d7 f348ab48  .........H...H.H
 0910 89fa8902 4883c204 88024883 c201488d  ....H.....H...H.
 0920 9510ffff ffb80000 0000b90c 00000048  ...............H
 0930 89d7f348 ab4889fa 89024883 c2048802  ...H.H....H.....
 0940 4883c201 c68573ff ffff01c7 45f80000  H.....s.....E...
 0950 0000c745 f4630000 0083bd0c ffffff00  ...E.c..........
 0960 7f13488b 8500ffff ff4883c0 63c60000  ..H......H..c...
 0970 e9520100 0083bd0c ffffff01 0f853801  .R............8.
 0980 0000488b 8500ffff ff4883c0 63c60001  ..H......H..c...
 0990 e9320100 00837df4 000f88b1 0000008b  .2....}.........
 09a0 45f44863 d0488b85 00ffffff 4801c28b  E.Hc.H......H...
 09b0 45f44898 0fb64405 8089c18b 45f44898  E.H...D.....E.H.
 09c0 0fb68405 10ffffff 01c88802 837df801  .............}..
 09d0 752fc745 f8000000 008b45f4 4863d048  u/.E......E.Hc.H
 09e0 8b8500ff ffff4801 d08b55f4 4863ca48  ......H...U.Hc.H
 09f0 8b9500ff ffff4801 ca0fb612 83c20188  ......H.........
 0a00 108b45f4 4863d048 8b8500ff ffff4801  ..E.Hc.H......H.
 0a10 d00fb600 3c097e2f c745f801 0000008b  ....<.~/.E......
 0a20 45f44863 d0488b85 00ffffff 4801d08b  E.Hc.H......H...
 0a30 55f44863 ca488b95 00ffffff 4801ca0f  U.Hc.H......H...
 0a40 b61283ea 0a881083 6df401e9 45ffffff  ........m...E...
 0a50 90c745f0 00000000 eb1a8b45 f048980f  ..E........E.H..
 0a60 b6940510 ffffff8b 45f04898 88540580  ........E.H..T..
 0a70 8345f001 837df064 7ee0c745 ec000000  .E...}.d~..E....
 0a80 00eb238b 45ec4863 d0488b85 00ffffff  ..#.E.Hc.H......
 0a90 4801d00f b6108b45 ec489888 940510ff  H......E.H......
 0aa0 ffff8345 ec01837d ec647ed7 c745f463  ...E...}.d~..E.c
 0ab0 00000083 ad0cffff ff0183bd 0cffffff  ................
 0ac0 010f8fce feffffc9 c3554889 e548897d  .........UH..H.}
 0ad0 e8488975 e0c745fc 00000000 eb148b45  .H.u..E........E
 0ae0 fc4863d0 488b45e0 4801d0c6 00008345  .Hc.H.E.H......E
 0af0 fc01837d fc647ee6 c745f800 000000c7  ...}.d~..E......
 0b00 45f40000 0000eb13 8345f801 837df864  E........E...}.d
 0b10 7509c745 f8630000 00eb148b 45f84863  u..E.c......E.Hc
 0b20 d0488b45 e84801d0 0fb60084 c074d9eb  .H.E.H.......t..
 0b30 2f8b45f4 8d500189 55f44863 d0488b45  /.E..P..U.Hc.H.E
 0b40 e0488d0c 028b45f8 8d500189 55f84863  .H....E..P..U.Hc
 0b50 d0488b45 e84801d0 0fb60083 c0308801  .H.E.H.......0..
 0b60 837df863 7ecb905d c30f1f80 00000000  .}.c~..]........
 0b70 41574156 4189ff41 5541544c 8d255612  AWAVA..AUATL.%V.
 0b80 20005548 8d2d5612 20005349 89f64989   .UH.-V. .SI..I.
 0b90 d54c29e5 4883ec08 48c1fd03 e867faff  .L).H...H....g..
 0ba0 ff4885ed 742031db 0f1f8400 00000000  .H..t 1.........
 0bb0 4c89ea4c 89f64489 ff41ff14 dc4883c3  L..L..D..A...H..
 0bc0 014839dd 75ea4883 c4085b5d 415c415d  .H9.u.H...[]A\A]
 0bd0 415e415f c390662e 0f1f8400 00000000  A^A_..f.........
 0be0 f3c3                                 ..              
Contents of section .fini:
 0be4 4883ec08 4883c408 c3                 H...H....       
Contents of section .rodata:
 0bf0 01000200 00000000 1b5b3331 6d001b5b  .........[31m..[
 0c00 33326d00 1b5b3334 6d001b5b 33356d00  32m..[34m..[35m.
 0c10 1b5b3333 6d000000 6661626f 6e616363  .[33m...fabonacc
 0c20 692c2074 776f206e 756d6265 72732072  i, two numbers r
 0c30 65717569 7265643a 0025730a 00256420  equired:.%s..%d 
 0c40 2564001b 5b306d00 25732573 25730a00  %d..[0m.%s%s%s..
Contents of section .eh_frame_hdr:
 0c50 011b033b 4c000000 08000000 d0f9ffff  ...;L...........
 0c60 98000000 00faffff c0000000 10faffff  ................
 0c70 68000000 40fbffff d8000000 6dfcffff  h...@.......m...
 0c80 f8000000 79feffff 18010000 20ffffff  ....y....... ...
 0c90 38010000 90ffffff 80010000           8...........    
Contents of section .eh_frame:
 0ca0 14000000 00000000 017a5200 01781001  .........zR..x..
 0cb0 1b0c0708 90010710 14000000 1c000000  ................
 0cc0 a0f9ffff 2b000000 00000000 00000000  ....+...........
 0cd0 14000000 00000000 017a5200 01781001  .........zR..x..
 0ce0 1b0c0708 90010000 24000000 1c000000  ........$.......
 0cf0 30f9ffff 30000000 000e1046 0e184a0f  0...0......F..J.
 0d00 0b770880 003f1a3b 2a332422 00000000  .w...?.;*3$"....
 0d10 14000000 44000000 38f9ffff 08000000  ....D...8.......
 0d20 00000000 00000000 1c000000 5c000000  ............\...
 0d30 60faffff 2d010000 00410e10 8602430d  `...-....A....C.
 0d40 06032801 0c070800 1c000000 7c000000  ..(.........|...
 0d50 6dfbffff 0c020000 00410e10 8602430d  m........A....C.
 0d60 06030702 0c070800 1c000000 9c000000  ................
 0d70 59fdffff a0000000 00410e10 8602430d  Y........A....C.
 0d80 06029b0c 07080000 44000000 bc000000  ........D.......
 0d90 e0fdffff 65000000 00420e10 8f02420e  ....e....B....B.
 0da0 188e0345 0e208d04 420e288c 05480e30  ...E. ..B.(..H.0
 0db0 8606480e 3883074d 0e40720e 38410e30  ..H.8..M.@r.8A.0
 0dc0 410e2842 0e20420e 18420e10 420e0800  A.(B. B..B..B...
 0dd0 10000000 04010000 08feffff 02000000  ................
 0de0 00000000 00000000                    ........        
Contents of section .init_array:
 201dd8 60070000 00000000                    `.......        
Contents of section .fini_array:
 201de0 20070000 00000000                     .......        
Contents of section .jcr:
 201de8 00000000 00000000                    ........        
Contents of section .dynamic:
 201df0 01000000 00000000 01000000 00000000  ................
 201e00 0c000000 00000000 08060000 00000000  ................
 201e10 0d000000 00000000 e40b0000 00000000  ................
 201e20 19000000 00000000 d81d2000 00000000  .......... .....
 201e30 1b000000 00000000 08000000 00000000  ................
 201e40 1a000000 00000000 e01d2000 00000000  .......... .....
 201e50 1c000000 00000000 08000000 00000000  ................
 201e60 f5feff6f 00000000 98020000 00000000  ...o............
 201e70 05000000 00000000 90030000 00000000  ................
 201e80 06000000 00000000 b8020000 00000000  ................
 201e90 0a000000 00000000 b1000000 00000000  ................
 201ea0 0b000000 00000000 18000000 00000000  ................
 201eb0 15000000 00000000 00000000 00000000  ................
 201ec0 03000000 00000000 00202000 00000000  .........  .....
 201ed0 02000000 00000000 30000000 00000000  ........0.......
 201ee0 14000000 00000000 07000000 00000000  ................
 201ef0 17000000 00000000 d8050000 00000000  ................
 201f00 07000000 00000000 88040000 00000000  ................
 201f10 08000000 00000000 50010000 00000000  ........P.......
 201f20 09000000 00000000 18000000 00000000  ................
 201f30 fbffff6f 00000000 00000008 00000000  ...o............
 201f40 feffff6f 00000000 58040000 00000000  ...o....X.......
 201f50 ffffff6f 00000000 01000000 00000000  ...o............
 201f60 f0ffff6f 00000000 42040000 00000000  ...o....B.......
 201f70 f9ffff6f 00000000 08000000 00000000  ...o............
 201f80 00000000 00000000 00000000 00000000  ................
 201f90 00000000 00000000 00000000 00000000  ................
 201fa0 00000000 00000000 00000000 00000000  ................
 201fb0 00000000 00000000 00000000 00000000  ................
 201fc0 00000000 00000000 00000000 00000000  ................
Contents of section .got:
 201fd0 00000000 00000000 00000000 00000000  ................
 201fe0 00000000 00000000 00000000 00000000  ................
 201ff0 00000000 00000000 00000000 00000000  ................
Contents of section .got.plt:
 202000 f01d2000 00000000 00000000 00000000  .. .............
 202010 00000000 00000000 36060000 00000000  ........6.......
 202020 46060000 00000000                    F.......        
Contents of section .data:
 202040 00000000 00000000 48202000 00000000  ........H  .....
 202050 00000000 00000000 00000000 00000000  ................
 202060 f80b0000 00000000 fe0b0000 00000000  ................
 202070 040c0000 00000000 0a0c0000 00000000  ................
 202080 100c0000 00000000                    ........        
Contents of section .comment:
 0000 4743433a 20284465 6269616e 20362e34  GCC: (Debian 6.4
 0010 2e302d32 2920362e 342e3020 32303137  .0-2) 6.4.0 2017
 0020 30373234 00                          0724.           
Contents of section .debug_aranges:
 0000 2c000000 02000000 00000800 00000000  ,...............
 0010 90070000 00000000 d9030000 00000000  ................
 0020 00000000 00000000 00000000 00000000  ................
Contents of section .debug_info:
 0000 ff040000 04000000 00000801 b3000000  ................
 0010 0c1e0200 009d0000 00900700 00000000  ................
 0020 00d90300 00000000 00000000 00025300  ..............S.
 0030 000002d8 38000000 03080725 02000003  ....8......%....
 0040 01086201 00000302 07c60100 00030407  ..b.............
 0050 2a020000 03010664 01000003 02054900  *......d......I.
 0060 00000404 05696e74 00030805 08010000  .....int........
 0070 024f0200 00038369 00000002 45020000  .O.....i....E...
 0080 03846900 00000308 075a0000 00050806  ..i......Z......
 0090 08950000 00030106 6b010000 07950000  ........k.......
 00a0 00085901 0000d804 f11e0200 00097100  ..Y...........q.
 00b0 000004f2 62000000 0009b901 000004f7  ....b...........
 00c0 8f000000 08099401 000004f8 8f000000  ................
 00d0 10098202 000004f9 8f000000 1809a101  ................
 00e0 000004fa 8f000000 20096300 000004fb  ........ .c.....
 00f0 8f000000 28093702 000004fc 8f000000  ....(.7.........
 0100 30097800 000004fd 8f000000 38090000  0.x.........8...
 0110 000004fe 8f000000 400a9f02 00000400  ........@.......
 0120 018f0000 00480a5e 02000004 01018f00  .....H.^........
 0130 0000500a 3c000000 0402018f 00000058  ..P.<..........X
 0140 0a940000 00040401 56020000 600a5702  ........V...`.W.
 0150 00000406 015c0200 00680ab9 02000004  .....\...h......
 0160 08016200 0000700a 74020000 040c0162  ..b...p.t......b
 0170 00000074 0a190000 00040e01 70000000  ...t........p...
 0180 780a1101 00000412 01460000 00800a90  x........F......
 0190 02000004 13015400 0000820a 8a010000  ......T.........
 01a0 04140162 02000083 0a020100 00041801  ...b............
 01b0 72020000 880a1d00 00000421 017b0000  r..........!.{..
 01c0 00900af5 01000004 29018d00 0000980a  ........).......
 01d0 fc010000 042a018d 000000a0 0a030200  .....*..........
 01e0 00042b01 8d000000 a80a0a02 0000042c  ..+............,
 01f0 018d0000 00b00a11 02000004 2e012d00  ..............-.
 0200 0000b80a 7c020000 042f0162 000000c0  ....|..../.b....
 0210 0ab00100 00043101 78020000 c4000bde  ......1.x.......
 0220 02000004 96087f01 00001804 9c560200  .............V..
 0230 0009ef01 0000049d 56020000 00095301  ........V.....S.
 0240 0000049e 5c020000 08093b01 000004a2  ....\.....;.....
 0250 62000000 10000608 25020000 0608a100  b.......%.......
 0260 00000c95 00000072 0200000d 86000000  .......r........
 0270 00000608 1e020000 0c950000 00880200  ................
 0280 000d8600 00001300 0e2d0100 000f7001  .........-....p.
 0290 0000043b 01880200 000fce02 0000043c  ...;...........<
 02a0 01880200 000f1d01 0000043d 01880200  ...........=....
 02b0 0006089c 00000007 b1020000 106e0200  .............n..
 02c0 0005aa5c 02000010 c7020000 05ab5c02  ...\..........\.
 02d0 000010fb 00000005 ac5c0200 00103300  .........\....3.
 02e0 0000061a 62000000 0cb70200 00f30200  ....b...........
 02f0 00110007 e8020000 10ad0200 00061bf3  ................
 0300 0200000c 8f000000 13030000 0d860000  ................
 0310 00040012 0c000000 010e0303 00000903  ................
 0320 60202000 00000000 13d90100 000171c9  `  ...........q.
 0330 0a000000 000000a0 00000000 00000001  ................
 0340 9c9c0300 00148f00 00000171 8f000000  ...........q....
 0350 02915815 73747200 01718f00 00000291  ..X.str..q......
 0360 50168500 00000175 62000000 02916816  P......ub.....h.
 0370 e0010000 01766200 00000291 6417d50a  .....vb.....d...
 0380 00000000 00002300 00000000 00001869  ......#........i
 0390 00017362 00000002 916c0000 13400100  ..sb.....l...@..
 03a0 00012fbd 08000000 0000000c 02000000  ../.............
 03b0 00000001 9c740400 00142b00 0000012f  .....t....+..../
 03c0 62000000 0391fc7d 14120000 00012f8f  b......}....../.
 03d0 00000003 91f07d16 25000000 01337404  ......}.%....3t.
 03e0 00000391 f07e16c1 02000001 34740400  .....~......4t..
 03f0 00039180 7e161802 00000136 62000000  ....~......6b...
 0400 02916816 89000000 01376200 00000291  ..h......7b.....
 0410 6419d508 00000000 00002600 00000000  d.........&.....
 0420 00003304 00001869 00013162 00000002  ..3....i..1b....
 0430 916c0019 510a0000 00000000 29000000  .l..Q.......)...
 0440 00000000 55040000 18690001 67620000  ....U....i..gb..
 0450 00029160 00177a0a 00000000 00003200  ...`..z.......2.
 0460 00000000 00001869 00016862 00000002  .......i..hb....
 0470 915c0000 0c950000 00840400 000d8600  .\..............
 0480 00006400 1aea0100 00011362 00000090  ..d........b....
 0490 07000000 0000002d 01000000 00000001  .......-........
 04a0 9c186100 01166200 00000291 64186200  ..a...b.....d.b.
 04b0 01166200 00000291 60168900 00000118  ..b.....`.......
 04c0 62000000 02916c18 6300011c 74040000  b.....l.c...t...
 04d0 0391f07e 164a0100 00011e74 04000003  ...~.J.....t....
 04e0 91807e17 1f080000 00000000 97000000  ..~.............
 04f0 00000000 18690001 23620000 00029168  .....i..#b.....h
 0500 000000                               ...             
Contents of section .debug_abbrev:
 0000 01110125 0e130b03 0e1b0e11 01120710  ...%............
 0010 17000002 1600030e 3a0b3b0b 49130000  ........:.;.I...
 0020 0324000b 0b3e0b03 0e000004 24000b0b  .$...>......$...
 0030 3e0b0308 0000050f 000b0b00 00060f00  >...............
 0040 0b0b4913 00000726 00491300 00081301  ..I....&.I......
 0050 030e0b0b 3a0b3b0b 01130000 090d0003  ....:.;.........
 0060 0e3a0b3b 0b491338 0b00000a 0d00030e  .:.;.I.8........
 0070 3a0b3b05 4913380b 00000b16 00030e3a  :.;.I.8........:
 0080 0b3b0b00 000c0101 49130113 00000d21  .;......I......!
 0090 0049132f 0b00000e 1300030e 3c190000  .I./........<...
 00a0 0f340003 0e3a0b3b 0549133f 193c1900  .4...:.;.I.?.<..
 00b0 00103400 030e3a0b 3b0b4913 3f193c19  ..4...:.;.I.?.<.
 00c0 00001121 00000012 3400030e 3a0b3b0b  ...!....4...:.;.
 00d0 49133f19 02180000 132e013f 19030e3a  I.?........?...:
 00e0 0b3b0b27 19110112 07401897 42190113  .;.'.....@..B...
 00f0 00001405 00030e3a 0b3b0b49 13021800  .......:.;.I....
 0100 00150500 03083a0b 3b0b4913 02180000  ......:.;.I.....
 0110 16340003 0e3a0b3b 0b491302 18000017  .4...:.;.I......
 0120 0b011101 12070000 18340003 083a0b3b  .........4...:.;
 0130 0b491302 18000019 0b011101 12070113  .I..............
 0140 00001a2e 013f1903 0e3a0b3b 0b271949  .....?...:.;.'.I
 0150 13110112 07401896 42190000 00        .....@..B....   
Contents of section .debug_line:
 0000 88010000 0200b300 00000101 fb0e0d00  ................
 0010 01010101 00000001 0000012f 7573722f  .........../usr/
 0020 6c69622f 6763632f 7838365f 36342d6c  lib/gcc/x86_64-l
 0030 696e7578 2d676e75 2f362f69 6e636c75  inux-gnu/6/inclu
 0040 6465002f 7573722f 696e636c 7564652f  de./usr/include/
 0050 7838365f 36342d6c 696e7578 2d676e75  x86_64-linux-gnu
 0060 2f626974 73002f75 73722f69 6e636c75  /bits./usr/inclu
 0070 64650000 6d61696e 2e630000 00007374  de..main.c....st
 0080 64646566 2e680001 00007479 7065732e  ddef.h....types.
 0090 68000200 006c6962 696f2e68 00030000  h....libio.h....
 00a0 73746469 6f2e6800 03000073 79735f65  stdio.h....sys_e
 00b0 72726c69 73742e68 00020000 00000902  rrlist.h........
 00c0 90070000 00000000 031201ad 08787608  .............xv.
 00d0 ae022314 022617ad 08140002 040106ac  ..#..&..........
 00e0 00020402 82000204 04580002 0404063e  .........X.....>
 00f0 00020404 085a0002 04040379 023a0100  .....Z.....y.:..
 0100 02040206 4a06030a 08123008 76000204  ....J.....0.v...
 0110 03069000 02040108 66066802 2313022d  ........f.h.#..-
 0120 14757691 d75bc9d7 030958a0 022d1367  .uv..[....X..-.g
 0130 75022816 08677502 28150372 4a031e66  u.(..gu.(..rJ..f
 0140 00020403 06900002 04010890 06670002  .............g..
 0150 04030690 00020401 02231206 6a750358  .........#..ju.X
 0160 74032ac8 30bc0002 04030690 00020401  t.*.0...........
 0170 083c0668 75762f4b 00020401 0666068e  .<.huv/K.....f..
 0180 08412f02 2f116902 03000101           .A/./.i.....    
Contents of section .debug_str:
 0000 5f494f5f 6275665f 656e6400 636f6c6f  _IO_buf_end.colo
 0010 72007265 73756c74 005f6f6c 645f6f66  r.result._old_of
 0020 66736574 00746d70 5f310069 6e746567  fset.tmp_1.integ
 0030 65720073 79735f6e 65727200 5f494f5f  er.sys_nerr._IO_
 0040 73617665 5f656e64 0073686f 72742069  save_end.short i
 0050 6e740073 697a655f 74007369 7a657479  nt.size_t.sizety
 0060 7065005f 494f5f77 72697465 5f707472  pe._IO_write_ptr
 0070 005f666c 61677300 5f494f5f 6275665f  ._flags._IO_buf_
 0080 62617365 00737263 5f696e64 6578006e  base.src_index.n
 0090 756d7300 5f6d6172 6b657273 002f686f  ums._markers./ho
 00a0 6d652f77 616e676e 69672f44 65736b74  me/wangnig/Deskt
 00b0 6f700047 4e552043 31312036 2e342e30  op.GNU C11 6.4.0
 00c0 20323031 37303732 34202d6d 74756e65   20170724 -mtune
 00d0 3d67656e 65726963 202d6d61 7263683d  =generic -march=
 00e0 7838362d 3634202d 67202d4f 30202d66  x86-64 -g -O0 -f
 00f0 6e6f2d62 75696c74 696e0073 74646572  no-builtin.stder
 0100 72005f6c 6f636b00 6c6f6e67 20696e74  r._lock.long int
 0110 005f6375 725f636f 6c756d6e 005f494f  ._cur_column._IO
 0120 5f325f31 5f737464 6572725f 005f494f  _2_1_stderr_._IO
 0130 5f46494c 455f706c 7573005f 706f7300  _FILE_plus._pos.
 0140 6661626f 6e616363 69007265 5f616674  fabonacci.re_aft
 0150 6572005f 73627566 005f494f 5f46494c  er._sbuf._IO_FIL
 0160 4500756e 7369676e 65642063 68617200  E.unsigned char.
 0170 5f494f5f 325f315f 73746469 6e5f005f  _IO_2_1_stdin_._
 0180 494f5f6d 61726b65 72005f73 686f7274  IO_marker._short
 0190 62756600 5f494f5f 72656164 5f656e64  buf._IO_read_end
 01a0 005f494f 5f777269 74655f62 61736500  ._IO_write_base.
 01b0 5f756e75 73656432 005f494f 5f726561  _unused2._IO_rea
 01c0 645f7074 72007368 6f727420 756e7369  d_ptr.short unsi
 01d0 676e6564 20696e74 00646f77 69746800  gned int.dowith.
 01e0 6465735f 696e6465 78006d61 696e005f  des_index.main._
 01f0 6e657874 005f5f70 61643100 5f5f7061  next.__pad1.__pa
 0200 6432005f 5f706164 33005f5f 70616434  d2.__pad3.__pad4
 0210 005f5f70 61643500 63617272 79006d61  .__pad5.carry.ma
 0220 696e2e63 006c6f6e 6720756e 7369676e  in.c.long unsign
 0230 65642069 6e74005f 494f5f77 72697465  ed int._IO_write
 0240 5f656e64 005f5f6f 66663634 5f74005f  _end.__off64_t._
 0250 5f6f6666 5f74005f 63686169 6e005f49  _off_t._chain._I
 0260 4f5f6261 636b7570 5f626173 65007374  O_backup_base.st
 0270 64696e00 5f666c61 67733200 5f6d6f64  din._flags2._mod
 0280 65005f49 4f5f7265 61645f62 61736500  e._IO_read_base.
 0290 5f767461 626c655f 6f666673 6574005f  _vtable_offset._
 02a0 494f5f73 6176655f 62617365 00737973  IO_save_base.sys
 02b0 5f657272 6c697374 005f6669 6c656e6f  _errlist._fileno
 02c0 00746d70 5f320073 74646f75 74005f49  .tmp_2.stdout._I
 02d0 4f5f325f 315f7374 646f7574 5f005f49  O_2_1_stdout_._I
 02e0 4f5f6c6f 636b5f74 00                 O_lock_t.       

Disassembly of section .init:

0000000000000608 <_init>:
 608:	48 83 ec 08          	sub    rsp,0x8
 60c:	48 8b 05 cd 19 20 00 	mov    rax,QWORD PTR [rip+0x2019cd]        # 201fe0 <__gmon_start__>
 613:	48 85 c0             	test   rax,rax
 616:	74 02                	je     61a <_init+0x12>
 618:	ff d0                	call   rax
 61a:	48 83 c4 08          	add    rsp,0x8
 61e:	c3                   	ret    

Disassembly of section .plt:

0000000000000620 <.plt>:
 620:	ff 35 e2 19 20 00    	push   QWORD PTR [rip+0x2019e2]        # 202008 <_GLOBAL_OFFSET_TABLE_+0x8>
 626:	ff 25 e4 19 20 00    	jmp    QWORD PTR [rip+0x2019e4]        # 202010 <_GLOBAL_OFFSET_TABLE_+0x10>
 62c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000000630 <printf@plt>:
 630:	ff 25 e2 19 20 00    	jmp    QWORD PTR [rip+0x2019e2]        # 202018 <printf@GLIBC_2.2.5>
 636:	68 00 00 00 00       	push   0x0
 63b:	e9 e0 ff ff ff       	jmp    620 <.plt>

0000000000000640 <__isoc99_scanf@plt>:
 640:	ff 25 da 19 20 00    	jmp    QWORD PTR [rip+0x2019da]        # 202020 <__isoc99_scanf@GLIBC_2.7>
 646:	68 01 00 00 00       	push   0x1
 64b:	e9 d0 ff ff ff       	jmp    620 <.plt>

Disassembly of section .plt.got:

0000000000000650 <__cxa_finalize@plt>:
 650:	ff 25 a2 19 20 00    	jmp    QWORD PTR [rip+0x2019a2]        # 201ff8 <__cxa_finalize@GLIBC_2.2.5>
 656:	66 90                	xchg   ax,ax

Disassembly of section .text:

0000000000000660 <_start>:
 660:	31 ed                	xor    ebp,ebp
 662:	49 89 d1             	mov    r9,rdx
 665:	5e                   	pop    rsi
 666:	48 89 e2             	mov    rdx,rsp
 669:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
 66d:	50                   	push   rax
 66e:	54                   	push   rsp
 66f:	4c 8d 05 6a 05 00 00 	lea    r8,[rip+0x56a]        # be0 <__libc_csu_fini>
 676:	48 8d 0d f3 04 00 00 	lea    rcx,[rip+0x4f3]        # b70 <__libc_csu_init>
 67d:	48 8d 3d 0c 01 00 00 	lea    rdi,[rip+0x10c]        # 790 <main>
 684:	ff 15 4e 19 20 00    	call   QWORD PTR [rip+0x20194e]        # 201fd8 <__libc_start_main@GLIBC_2.2.5>
 68a:	f4                   	hlt    
 68b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000000690 <deregister_tm_clones>:
 690:	48 8d 3d f1 19 20 00 	lea    rdi,[rip+0x2019f1]        # 202088 <__TMC_END__>
 697:	48 8d 05 f1 19 20 00 	lea    rax,[rip+0x2019f1]        # 20208f <__TMC_END__+0x7>
 69e:	55                   	push   rbp
 69f:	48 29 f8             	sub    rax,rdi
 6a2:	48 89 e5             	mov    rbp,rsp
 6a5:	48 83 f8 0e          	cmp    rax,0xe
 6a9:	76 15                	jbe    6c0 <deregister_tm_clones+0x30>
 6ab:	48 8b 05 1e 19 20 00 	mov    rax,QWORD PTR [rip+0x20191e]        # 201fd0 <_ITM_deregisterTMCloneTable>
 6b2:	48 85 c0             	test   rax,rax
 6b5:	74 09                	je     6c0 <deregister_tm_clones+0x30>
 6b7:	5d                   	pop    rbp
 6b8:	ff e0                	jmp    rax
 6ba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
 6c0:	5d                   	pop    rbp
 6c1:	c3                   	ret    
 6c2:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
 6c6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 6cd:	00 00 00 

00000000000006d0 <register_tm_clones>:
 6d0:	48 8d 3d b1 19 20 00 	lea    rdi,[rip+0x2019b1]        # 202088 <__TMC_END__>
 6d7:	48 8d 35 aa 19 20 00 	lea    rsi,[rip+0x2019aa]        # 202088 <__TMC_END__>
 6de:	55                   	push   rbp
 6df:	48 29 fe             	sub    rsi,rdi
 6e2:	48 89 e5             	mov    rbp,rsp
 6e5:	48 c1 fe 03          	sar    rsi,0x3
 6e9:	48 89 f0             	mov    rax,rsi
 6ec:	48 c1 e8 3f          	shr    rax,0x3f
 6f0:	48 01 c6             	add    rsi,rax
 6f3:	48 d1 fe             	sar    rsi,1
 6f6:	74 18                	je     710 <register_tm_clones+0x40>
 6f8:	48 8b 05 f1 18 20 00 	mov    rax,QWORD PTR [rip+0x2018f1]        # 201ff0 <_ITM_registerTMCloneTable>
 6ff:	48 85 c0             	test   rax,rax
 702:	74 0c                	je     710 <register_tm_clones+0x40>
 704:	5d                   	pop    rbp
 705:	ff e0                	jmp    rax
 707:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
 70e:	00 00 
 710:	5d                   	pop    rbp
 711:	c3                   	ret    
 712:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
 716:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 71d:	00 00 00 

0000000000000720 <__do_global_dtors_aux>:
 720:	80 3d 61 19 20 00 00 	cmp    BYTE PTR [rip+0x201961],0x0        # 202088 <__TMC_END__>
 727:	75 27                	jne    750 <__do_global_dtors_aux+0x30>
 729:	48 83 3d c7 18 20 00 	cmp    QWORD PTR [rip+0x2018c7],0x0        # 201ff8 <__cxa_finalize@GLIBC_2.2.5>
 730:	00 
 731:	55                   	push   rbp
 732:	48 89 e5             	mov    rbp,rsp
 735:	74 0c                	je     743 <__do_global_dtors_aux+0x23>
 737:	48 8b 3d 0a 19 20 00 	mov    rdi,QWORD PTR [rip+0x20190a]        # 202048 <__dso_handle>
 73e:	e8 0d ff ff ff       	call   650 <__cxa_finalize@plt>
 743:	e8 48 ff ff ff       	call   690 <deregister_tm_clones>
 748:	5d                   	pop    rbp
 749:	c6 05 38 19 20 00 01 	mov    BYTE PTR [rip+0x201938],0x1        # 202088 <__TMC_END__>
 750:	f3 c3                	repz ret 
 752:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
 756:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 75d:	00 00 00 

0000000000000760 <frame_dummy>:
 760:	48 8d 3d 81 16 20 00 	lea    rdi,[rip+0x201681]        # 201de8 <__JCR_END__>
 767:	48 83 3f 00          	cmp    QWORD PTR [rdi],0x0
 76b:	75 0b                	jne    778 <frame_dummy+0x18>
 76d:	e9 5e ff ff ff       	jmp    6d0 <register_tm_clones>
 772:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
 778:	48 8b 05 69 18 20 00 	mov    rax,QWORD PTR [rip+0x201869]        # 201fe8 <_Jv_RegisterClasses>
 77f:	48 85 c0             	test   rax,rax
 782:	74 e9                	je     76d <frame_dummy+0xd>
 784:	55                   	push   rbp
 785:	48 89 e5             	mov    rbp,rsp
 788:	ff d0                	call   rax
 78a:	5d                   	pop    rbp
 78b:	e9 40 ff ff ff       	jmp    6d0 <register_tm_clones>

0000000000000790 <main>:
char* color[] =  {RED, GREEN, BLUE, PURPLE, YELLOW};

void fabonacci(int, char[101]);
void dowith(char[101], char[101]);

int main(void){
 790:	55                   	push   rbp
 791:	48 89 e5             	mov    rbp,rsp
 794:	48 81 ec f0 00 00 00 	sub    rsp,0xf0
	printf("%s\n","fabonacci, two numbers required:" );
 79b:	48 8d 35 76 04 00 00 	lea    rsi,[rip+0x476]        # c18 <_IO_stdin_used+0x28>
 7a2:	48 8d 3d 90 04 00 00 	lea    rdi,[rip+0x490]        # c39 <_IO_stdin_used+0x49>
 7a9:	b8 00 00 00 00       	mov    eax,0x0
 7ae:	e8 7d fe ff ff       	call   630 <printf@plt>

	int a, b;

	int index = 0;
 7b3:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0

	scanf("%d %d",&a, &b);
 7ba:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
 7be:	48 8d 45 f4          	lea    rax,[rbp-0xc]
 7c2:	48 89 c6             	mov    rsi,rax
 7c5:	48 8d 3d 71 04 00 00 	lea    rdi,[rip+0x471]        # c3d <_IO_stdin_used+0x4d>
 7cc:	b8 00 00 00 00       	mov    eax,0x0
 7d1:	e8 6a fe ff ff       	call   640 <__isoc99_scanf@plt>

	char c[101] = {0};//result
 7d6:	48 8d 55 80          	lea    rdx,[rbp-0x80]
 7da:	b8 00 00 00 00       	mov    eax,0x0
 7df:	b9 0c 00 00 00       	mov    ecx,0xc
 7e4:	48 89 d7             	mov    rdi,rdx
 7e7:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
 7ea:	48 89 fa             	mov    rdx,rdi
 7ed:	89 02                	mov    DWORD PTR [rdx],eax
 7ef:	48 83 c2 04          	add    rdx,0x4
 7f3:	88 02                	mov    BYTE PTR [rdx],al
 7f5:	48 83 c2 01          	add    rdx,0x1

	char re_after[101] = {0};//处理后的数组，可以直接显示
 7f9:	48 8d 95 10 ff ff ff 	lea    rdx,[rbp-0xf0]
 800:	b8 00 00 00 00       	mov    eax,0x0
 805:	b9 0c 00 00 00       	mov    ecx,0xc
 80a:	48 89 d7             	mov    rdi,rdx
 80d:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
 810:	48 89 fa             	mov    rdx,rdi
 813:	89 02                	mov    DWORD PTR [rdx],eax
 815:	48 83 c2 04          	add    rdx,0x4
 819:	88 02                	mov    BYTE PTR [rdx],al
 81b:	48 83 c2 01          	add    rdx,0x1

	//int i = a;
	//char* strp = "";

	for(int i = a; i <= b; i++){
 81f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
 822:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
 825:	e9 80 00 00 00       	jmp    8aa <main+0x11a>
		fabonacci(i,c);
 82a:	48 8d 55 80          	lea    rdx,[rbp-0x80]
 82e:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
 831:	48 89 d6             	mov    rsi,rdx
 834:	89 c7                	mov    edi,eax
 836:	e8 82 00 00 00       	call   8bd <fabonacci>
        //ltoa(c,strp,10);
		index = (index + 1) > 4 ? 0 : index + 1;
 83b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
 83e:	83 c0 01             	add    eax,0x1
 841:	83 f8 04             	cmp    eax,0x4
 844:	7f 08                	jg     84e <main+0xbe>
 846:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
 849:	83 c0 01             	add    eax,0x1
 84c:	eb 05                	jmp    853 <main+0xc3>
 84e:	b8 00 00 00 00       	mov    eax,0x0
 853:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax

		dowith(c, re_after);
 856:	48 8d 95 10 ff ff ff 	lea    rdx,[rbp-0xf0]
 85d:	48 8d 45 80          	lea    rax,[rbp-0x80]
 861:	48 89 d6             	mov    rsi,rdx
 864:	48 89 c7             	mov    rdi,rax
 867:	e8 5d 02 00 00       	call   ac9 <dowith>

		printf("%s%s%s\n", color[index],re_after,NONE);
 86c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
 86f:	48 98                	cdqe   
 871:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
 878:	00 
 879:	48 8d 05 e0 17 20 00 	lea    rax,[rip+0x2017e0]        # 202060 <color>
 880:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
 884:	48 8d 95 10 ff ff ff 	lea    rdx,[rbp-0xf0]
 88b:	48 8d 0d b1 03 00 00 	lea    rcx,[rip+0x3b1]        # c43 <_IO_stdin_used+0x53>
 892:	48 89 c6             	mov    rsi,rax
 895:	48 8d 3d ac 03 00 00 	lea    rdi,[rip+0x3ac]        # c48 <_IO_stdin_used+0x58>
 89c:	b8 00 00 00 00       	mov    eax,0x0
 8a1:	e8 8a fd ff ff       	call   630 <printf@plt>
	for(int i = a; i <= b; i++){
 8a6:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
 8aa:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
 8ad:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
 8b0:	0f 8e 74 ff ff ff    	jle    82a <main+0x9a>
 8b6:	b8 00 00 00 00       	mov    eax,0x0
	}

}
 8bb:	c9                   	leave  
 8bc:	c3                   	ret    

00000000000008bd <fabonacci>:

void fabonacci(int integer, char* result){
 8bd:	55                   	push   rbp
 8be:	48 89 e5             	mov    rbp,rsp
 8c1:	48 81 ec 88 00 00 00 	sub    rsp,0x88
 8c8:	89 bd 0c ff ff ff    	mov    DWORD PTR [rbp-0xf4],edi
 8ce:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi

    for(int i = 0; i < 101; i++)result[i] = 0;
 8d5:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
 8dc:	eb 17                	jmp    8f5 <fabonacci+0x38>
 8de:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
 8e1:	48 63 d0             	movsxd rdx,eax
 8e4:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
 8eb:	48 01 d0             	add    rax,rdx
 8ee:	c6 00 00             	mov    BYTE PTR [rax],0x0
 8f1:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
 8f5:	83 7d fc 64          	cmp    DWORD PTR [rbp-0x4],0x64
 8f9:	7e e3                	jle    8de <fabonacci+0x21>

    char tmp_1[101] = {0};//tmp_1[49] = 0;
 8fb:	48 8d 55 80          	lea    rdx,[rbp-0x80]
 8ff:	b8 00 00 00 00       	mov    eax,0x0
 904:	b9 0c 00 00 00       	mov    ecx,0xc
 909:	48 89 d7             	mov    rdi,rdx
 90c:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
 90f:	48 89 fa             	mov    rdx,rdi
 912:	89 02                	mov    DWORD PTR [rdx],eax
 914:	48 83 c2 04          	add    rdx,0x4
 918:	88 02                	mov    BYTE PTR [rdx],al
 91a:	48 83 c2 01          	add    rdx,0x1
	char tmp_2[101] = {0};tmp_2[99] = 1;
 91e:	48 8d 95 10 ff ff ff 	lea    rdx,[rbp-0xf0]
 925:	b8 00 00 00 00       	mov    eax,0x0
 92a:	b9 0c 00 00 00       	mov    ecx,0xc
 92f:	48 89 d7             	mov    rdi,rdx
 932:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
 935:	48 89 fa             	mov    rdx,rdi
 938:	89 02                	mov    DWORD PTR [rdx],eax
 93a:	48 83 c2 04          	add    rdx,0x4
 93e:	88 02                	mov    BYTE PTR [rdx],al
 940:	48 83 c2 01          	add    rdx,0x1
 944:	c6 85 73 ff ff ff 01 	mov    BYTE PTR [rbp-0x8d],0x1

	int carry = 0;//1表示进位
 94b:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
	int index = 99;//位数指针
 952:	c7 45 f4 63 00 00 00 	mov    DWORD PTR [rbp-0xc],0x63

	if(integer <= 0){
 959:	83 bd 0c ff ff ff 00 	cmp    DWORD PTR [rbp-0xf4],0x0
 960:	7f 13                	jg     975 <fabonacci+0xb8>
        result[99] = 0;
 962:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
 969:	48 83 c0 63          	add    rax,0x63
 96d:	c6 00 00             	mov    BYTE PTR [rax],0x0
        return result;
 970:	e9 52 01 00 00       	jmp    ac7 <fabonacci+0x20a>
	}

	if(integer == 1){
 975:	83 bd 0c ff ff ff 01 	cmp    DWORD PTR [rbp-0xf4],0x1
 97c:	0f 85 38 01 00 00    	jne    aba <fabonacci+0x1fd>
        result[99] = 1;
 982:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
 989:	48 83 c0 63          	add    rax,0x63
 98d:	c6 00 01             	mov    BYTE PTR [rax],0x1
        return result;
 990:	e9 32 01 00 00       	jmp    ac7 <fabonacci+0x20a>

	while(integer >= 2){//迭代次数

        for(;;){//每一次迭代的加法运算

            if(index < 0)break;
 995:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
 999:	0f 88 b1 00 00 00    	js     a50 <fabonacci+0x193>
            //if(carry == 0 && tmp_1[index] == 0 && tmp_2[index] == 0)break;
            result[index] = tmp_1[index] + tmp_2[index];
 99f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
 9a2:	48 63 d0             	movsxd rdx,eax
 9a5:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
 9ac:	48 01 c2             	add    rdx,rax
 9af:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
 9b2:	48 98                	cdqe   
 9b4:	0f b6 44 05 80       	movzx  eax,BYTE PTR [rbp+rax*1-0x80]
 9b9:	89 c1                	mov    ecx,eax
 9bb:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
 9be:	48 98                	cdqe   
 9c0:	0f b6 84 05 10 ff ff 	movzx  eax,BYTE PTR [rbp+rax*1-0xf0]
 9c7:	ff 
 9c8:	01 c8                	add    eax,ecx
 9ca:	88 02                	mov    BYTE PTR [rdx],al
            if(carry == 1){
 9cc:	83 7d f8 01          	cmp    DWORD PTR [rbp-0x8],0x1
 9d0:	75 2f                	jne    a01 <fabonacci+0x144>
                carry = 0;
 9d2:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
                result[index] += 1;
 9d9:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
 9dc:	48 63 d0             	movsxd rdx,eax
 9df:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
 9e6:	48 01 d0             	add    rax,rdx
 9e9:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
 9ec:	48 63 ca             	movsxd rcx,edx
 9ef:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
 9f6:	48 01 ca             	add    rdx,rcx
 9f9:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
 9fc:	83 c2 01             	add    edx,0x1
 9ff:	88 10                	mov    BYTE PTR [rax],dl
            }

            //进位处理
            if(result[index] > 9){
 a01:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
 a04:	48 63 d0             	movsxd rdx,eax
 a07:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
 a0e:	48 01 d0             	add    rax,rdx
 a11:	0f b6 00             	movzx  eax,BYTE PTR [rax]
 a14:	3c 09                	cmp    al,0x9
 a16:	7e 2f                	jle    a47 <fabonacci+0x18a>
                carry = 1;
 a18:	c7 45 f8 01 00 00 00 	mov    DWORD PTR [rbp-0x8],0x1
                result[index] -= 10;
 a1f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
 a22:	48 63 d0             	movsxd rdx,eax
 a25:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
 a2c:	48 01 d0             	add    rax,rdx
 a2f:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
 a32:	48 63 ca             	movsxd rcx,edx
 a35:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
 a3c:	48 01 ca             	add    rdx,rcx
 a3f:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
 a42:	83 ea 0a             	sub    edx,0xa
 a45:	88 10                	mov    BYTE PTR [rax],dl
            }

            index--;
 a47:	83 6d f4 01          	sub    DWORD PTR [rbp-0xc],0x1
            if(index < 0)break;
 a4b:	e9 45 ff ff ff       	jmp    995 <fabonacci+0xd8>
 a50:	90                   	nop
        }
        */
        //回到默认状态
        //tmp_1 = tmp_2;
        //tmp_2 = result;
        for(int i = 0; i < 101; i++)tmp_1[i] = tmp_2[i];
 a51:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
 a58:	eb 1a                	jmp    a74 <fabonacci+0x1b7>
 a5a:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
 a5d:	48 98                	cdqe   
 a5f:	0f b6 94 05 10 ff ff 	movzx  edx,BYTE PTR [rbp+rax*1-0xf0]
 a66:	ff 
 a67:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
 a6a:	48 98                	cdqe   
 a6c:	88 54 05 80          	mov    BYTE PTR [rbp+rax*1-0x80],dl
 a70:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
 a74:	83 7d f0 64          	cmp    DWORD PTR [rbp-0x10],0x64
 a78:	7e e0                	jle    a5a <fabonacci+0x19d>
        for(int i = 0; i < 101; i++)tmp_2[i] = result[i];
 a7a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
 a81:	eb 23                	jmp    aa6 <fabonacci+0x1e9>
 a83:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
 a86:	48 63 d0             	movsxd rdx,eax
 a89:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
 a90:	48 01 d0             	add    rax,rdx
 a93:	0f b6 10             	movzx  edx,BYTE PTR [rax]
 a96:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
 a99:	48 98                	cdqe   
 a9b:	88 94 05 10 ff ff ff 	mov    BYTE PTR [rbp+rax*1-0xf0],dl
 aa2:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
 aa6:	83 7d ec 64          	cmp    DWORD PTR [rbp-0x14],0x64
 aaa:	7e d7                	jle    a83 <fabonacci+0x1c6>
        //memcpy(tmp_1,tmp_2,101);
        //memcpy(tmp_2,result,101);//一个int有4个字节

        index = 99;
 aac:	c7 45 f4 63 00 00 00 	mov    DWORD PTR [rbp-0xc],0x63
		integer--;//count++;
 ab3:	83 ad 0c ff ff ff 01 	sub    DWORD PTR [rbp-0xf4],0x1
	while(integer >= 2){//迭代次数
 aba:	83 bd 0c ff ff ff 01 	cmp    DWORD PTR [rbp-0xf4],0x1
 ac1:	0f 8f ce fe ff ff    	jg     995 <fabonacci+0xd8>
	}
}
 ac7:	c9                   	leave  
 ac8:	c3                   	ret    

0000000000000ac9 <dowith>:

void dowith(char* nums, char* str){
 ac9:	55                   	push   rbp
 aca:	48 89 e5             	mov    rbp,rsp
 acd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
 ad1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi

    for(int i = 0; i < 101; i++)str[i] = 0;
 ad5:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
 adc:	eb 14                	jmp    af2 <dowith+0x29>
 ade:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
 ae1:	48 63 d0             	movsxd rdx,eax
 ae4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
 ae8:	48 01 d0             	add    rax,rdx
 aeb:	c6 00 00             	mov    BYTE PTR [rax],0x0
 aee:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
 af2:	83 7d fc 64          	cmp    DWORD PTR [rbp-0x4],0x64
 af6:	7e e6                	jle    ade <dowith+0x15>

    int src_index = 0;//指示第一位
 af8:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
    int des_index = 0;//这个是str【】专用的游标cursor
 aff:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0

    while(nums[src_index] == 0){
 b06:	eb 13                	jmp    b1b <dowith+0x52>
        src_index++;
 b08:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
        if(src_index == 100){src_index = 99;break;}
 b0c:	83 7d f8 64          	cmp    DWORD PTR [rbp-0x8],0x64
 b10:	75 09                	jne    b1b <dowith+0x52>
 b12:	c7 45 f8 63 00 00 00 	mov    DWORD PTR [rbp-0x8],0x63
 b19:	eb 14                	jmp    b2f <dowith+0x66>
    while(nums[src_index] == 0){
 b1b:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
 b1e:	48 63 d0             	movsxd rdx,eax
 b21:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
 b25:	48 01 d0             	add    rax,rdx
 b28:	0f b6 00             	movzx  eax,BYTE PTR [rax]
 b2b:	84 c0                	test   al,al
 b2d:	74 d9                	je     b08 <dowith+0x3f>
    }

    while(src_index < 100){
 b2f:	eb 2f                	jmp    b60 <dowith+0x97>
        str[des_index++]  = nums[src_index++] + 48; //显示ascii码
 b31:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
 b34:	8d 50 01             	lea    edx,[rax+0x1]
 b37:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
 b3a:	48 63 d0             	movsxd rdx,eax
 b3d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
 b41:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
 b45:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
 b48:	8d 50 01             	lea    edx,[rax+0x1]
 b4b:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
 b4e:	48 63 d0             	movsxd rdx,eax
 b51:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
 b55:	48 01 d0             	add    rax,rdx
 b58:	0f b6 00             	movzx  eax,BYTE PTR [rax]
 b5b:	83 c0 30             	add    eax,0x30
 b5e:	88 01                	mov    BYTE PTR [rcx],al
    while(src_index < 100){
 b60:	83 7d f8 63          	cmp    DWORD PTR [rbp-0x8],0x63
 b64:	7e cb                	jle    b31 <dowith+0x68>
    }
}
 b66:	90                   	nop
 b67:	5d                   	pop    rbp
 b68:	c3                   	ret    
 b69:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000000b70 <__libc_csu_init>:
 b70:	41 57                	push   r15
 b72:	41 56                	push   r14
 b74:	41 89 ff             	mov    r15d,edi
 b77:	41 55                	push   r13
 b79:	41 54                	push   r12
 b7b:	4c 8d 25 56 12 20 00 	lea    r12,[rip+0x201256]        # 201dd8 <__frame_dummy_init_array_entry>
 b82:	55                   	push   rbp
 b83:	48 8d 2d 56 12 20 00 	lea    rbp,[rip+0x201256]        # 201de0 <__init_array_end>
 b8a:	53                   	push   rbx
 b8b:	49 89 f6             	mov    r14,rsi
 b8e:	49 89 d5             	mov    r13,rdx
 b91:	4c 29 e5             	sub    rbp,r12
 b94:	48 83 ec 08          	sub    rsp,0x8
 b98:	48 c1 fd 03          	sar    rbp,0x3
 b9c:	e8 67 fa ff ff       	call   608 <_init>
 ba1:	48 85 ed             	test   rbp,rbp
 ba4:	74 20                	je     bc6 <__libc_csu_init+0x56>
 ba6:	31 db                	xor    ebx,ebx
 ba8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
 baf:	00 
 bb0:	4c 89 ea             	mov    rdx,r13
 bb3:	4c 89 f6             	mov    rsi,r14
 bb6:	44 89 ff             	mov    edi,r15d
 bb9:	41 ff 14 dc          	call   QWORD PTR [r12+rbx*8]
 bbd:	48 83 c3 01          	add    rbx,0x1
 bc1:	48 39 dd             	cmp    rbp,rbx
 bc4:	75 ea                	jne    bb0 <__libc_csu_init+0x40>
 bc6:	48 83 c4 08          	add    rsp,0x8
 bca:	5b                   	pop    rbx
 bcb:	5d                   	pop    rbp
 bcc:	41 5c                	pop    r12
 bce:	41 5d                	pop    r13
 bd0:	41 5e                	pop    r14
 bd2:	41 5f                	pop    r15
 bd4:	c3                   	ret    
 bd5:	90                   	nop
 bd6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 bdd:	00 00 00 

0000000000000be0 <__libc_csu_fini>:
 be0:	f3 c3                	repz ret 

Disassembly of section .fini:

0000000000000be4 <_fini>:
 be4:	48 83 ec 08          	sub    rsp,0x8
 be8:	48 83 c4 08          	add    rsp,0x8
 bec:	c3                   	ret    
